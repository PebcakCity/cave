@using NLog
@using Cave.DeviceControllers
@using Cave.DeviceControllers.Projectors
@using Cave.DeviceControllers.Projectors.NEC

@inject IToastService ToastService
@implements IObserver<DeviceStatus>

<h1>Device Controller - @DeviceName</h1>
@if ( DeviceReady )
{
    <p>Model: @ModelNumber</p>
    <p>Serial number: @SerialNumber</p>

    <p>Device ready</p>

    if ( Device is IDisplay display )
    {
        <button class="btn btn-success" @onclick="@DisplayPowerOn">Power On</button>
        <button class="btn btn-danger" @onclick="@DisplayPowerOff">Power Off</button>
        <button class="btn btn-primary" @onclick="@(() => DisplaySelectInput("RGB1"))">RGB1</button>
        <button class="btn btn-primary" @onclick="@(() => DisplaySelectInput("HDMI1"))">HDMI1</button>
        if ( display is IDisplayMutable idm )
        {
            <button class="btn btn-primary">Display mute on/off</button>

            if( idm is Projector pj )
            {
                <p>Lamp usage: @LampHoursText</p>
            }
        }
    }
}
else
{
    <button class="btn btn-danger" @onclick="TryInitializeDevice">Initialize</button>
}

@code {
    #nullable disable

    #region Public fields / parameters

    [Parameter]
    public string IpAddress { get; set; }

    [Parameter]
    public int Port { get; set; }

    [Parameter]
    public string DeviceName { get; set; }

    [Parameter]
    public string DeviceClass { get; set; }

    #endregion

    #region Private fields

    private IDevice Device = null;
    private bool DeviceReady = false;
    private IDisposable unsubscriber;

    private string ModelNumber;
    private string SerialNumber;

    private string LastInputSelected;
    private bool? VideoMuted;
    private bool? AudioMuted;

    private int? LampHoursTotal;
    private int? LampHoursUsed;
    private string LampHoursText;

    #endregion

    #region Private/protected methods

    protected override async Task OnInitializedAsync()
    {
        try
        {
            switch ( DeviceClass )
            {
                case nameof( NECProjector ):
                    if ( IpAddress is not null )
                    {
                        Device = new NECProjector( IpAddress, Port );
                        this.unsubscriber = Device.Subscribe(this);
                        await TryInitializeDevice();
                    }
                    break;
            }
        }
        catch { }
    }

    private async Task TryInitializeDevice()
    {
        try
        {
            await Device.Initialize();
            DeviceReady = true;
        }
        catch ( Exception ex )
        {
            ToastService.ShowError( $"Device failed to initialize: {ex.Message}" );
        }
    }

    private async Task DisplayPowerOn()
    {
        try
        {
            IDisplay id = Device as IDisplay;
            await id.PowerOn();
        }
        catch ( Exception ex )
        {
            OnError(ex);
        }
    }

    private async Task DisplayPowerOff()
    {
        try
        {
            IDisplay id = Device as IDisplay;
            await id.PowerOff();
        }
        catch ( Exception ex )
        {
            OnError(ex);
        }
    }

    private async Task DisplaySelectInput( string input )
    {
        try
        {
            IDisplay id = Device as IDisplay;
            await id.PowerOnSelectInput( input );
        }
        catch ( Exception ex )
        {
            OnError(ex);
        }
    }

    private async Task DisplayMute( bool muted )
    {
        try
        {
            IDisplayMutable idm = Device as IDisplayMutable;
            await idm.DisplayMute( muted );
        }
        catch ( Exception ex )
        {
            OnError(ex);
        }
    }

    #endregion

    #region Public methods

    public void Subscribe( IObservable<DeviceStatus> observable )
    {
        if ( observable != null )
            unsubscriber = observable.Subscribe( this );
    }

    public void Unsubscribe()
    {
        unsubscriber.Dispose();
    }

    /// <summary>
    /// Take a DeviceStatus instance representing what was updated and update
    /// our local data, then display the included message if present.
    /// </summary>
    /// <param name="status">DeviceStatus instance representing everything that changed</param>
    public void OnNext( DeviceStatus status )
    {
        this.ModelNumber = status.ModelNumber;
        this.SerialNumber = status.SerialNumber;

        if ( status.LampHoursTotal != null )
            this.LampHoursTotal = status.LampHoursTotal;

        if ( status.LampHoursUsed != null )
            this.LampHoursUsed = status.LampHoursUsed;

        // bug here in % calculation?
        this.LampHoursText = ( LampHoursTotal > -1 && LampHoursUsed > -1 ) ?
            $"{LampHoursUsed} / {LampHoursTotal} hrs "
                + $"({(int)Math.Floor((double)LampHoursUsed/(double)LampHoursTotal*100.0)}%)" 
                : "n/a";

        this.LastInputSelected = status.InputSelected?.ToString();
        this.VideoMuted = status.VideoMuted;
        this.AudioMuted = status.AudioMuted;

        if ( status.Message != null )
            DisplayMessage(status.Message, status.MessageType);
    }

    /// <summary>
    /// Helper for OnNext()
    /// </summary>
    /// <param name="message">Message to toast</param>
    /// <param name="type">Severity level of message</param>
    private void DisplayMessage( string message, MessageType type )
    {
        switch ( type )
        {
            case MessageType.Info:
                ToastService.ShowInfo(message);
                break;
            case MessageType.Success:
                ToastService.ShowSuccess(message);
                break;
            case MessageType.Warning:
                ToastService.ShowWarning(message);
                break;
            case MessageType.Error:
                ToastService.ShowError(message);
                break;
        }
    }

    /// <summary>
    /// Display an error message
    /// </summary>
    /// <param name="exception">The exception or AggregateException causing this error</param>
    public void OnError( Exception exception )
    {
        if ( exception is AggregateException ae )
        {
            foreach ( Exception e in ae.InnerExceptions )
            {
                ToastService.ShowError( e.Message );
            }
        }
        else if ( exception is NECCommandError nce )
        {
            ToastService.ShowError( nce );
        }
        else
        {
            ToastService.ShowError( exception.Message );
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public void OnCompleted()
    {
        this.Unsubscribe();
    }

#endregion
}
