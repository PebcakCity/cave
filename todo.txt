Refactorings:

Just reading through classes one at a time and noting all the weird things I don't like and what I can do to fix them.

Library:
-------

1. Move Projector.cs & Television.cs to DeviceControllers namespace.  Should be no need to include separate namespace
just to access these abstracts. DONE

2. Why is there no DisplayMute()/AudioMute() parameterless method for devices?  TVs would definitely benefit from this
because they don't usually have a way to get mute state, the remote button just toggles it.  Projectors DO have a way
to get state and that state is tracked by the device controller, so a toggle method works equally well right?
I think the interface method should be parameterless and if a device needs a method to take a bool parameter, that's
extra and can be implemented just in the device class itself. DONE

3. Fix the order of override async vs async override on a few methods for consistency. DONE

4. Remove try/catch blocks deemed unnecessary due to exceptions being logged more than once.  DONE with NECProjector,
still need to look at Roku

5. Refactor & test timing on Roku.PowerOnSelectInput.  Haven't even tested this so I don't know if it works like it is
or needs to get & parse the XML to see if the device is on before trying to select inputs.  Have a feeling 1 second
delay is not gonna be enough when I finally test this.  Not much motivation to test at home & no TV to test on at work

6. Don't really like DeviceConnectionInfo or its subclasses.  Feels unnecessary.  Isn't there already classes for this?
Just need a way to support devices that can communicate using either means and abstract away connection details.  At
least maybe justify it by adding other properties to the subclasses, even if optional.  Parity & stop bits for serial,
something.

7. Still thinking about switching from observer to INotify.  Seems like a better fit in some places.
If I'm gonna do it, the time is now before writing any other apps using the library.  May do some testing later


Non-library stuff / DisplayTester app / minor stuff:
---------------------------------------------------

1. Think of a better name

2. Refactor to use default available inputs on each device... ButtonConnect_Clicked should initialize each device with
list of default inputs available for that device type and the input switch buttons should use those.  Then eliminate the
switch block in each ButtonInputX_Clicked method and instead just do
await DisplayDevice.PowerOnSelectInput(DisplayDevice.InputsAvailable[0]) etc...
Speaking of, need to refactor & test timing on Roku.PowerOnSelectInput... -> library todos #3.  

3. Since audio volume works on NEC projectors (and likely on all projectors with pjlink), can refactor audio volume
controls to work with all IAudio devices, not just TVs.

4. ButtonBlank_Clicked should use IDisplayMutable instead of Projector (& use toggle method, see library todo #2)

5. ButtonClear should be enabled by default (InitializeControls).  Move from disable list to enable list.
Unfortunately it also has to be moved out of its parent (GridControls) so it can be enabled independently, or 
GridControls has be enabled/disabled bit by bit (tedious).  Too late in the day for me to break out my laptop and mess
with Glade.  Will get to this eventually.



========================================================================================================================

Have pretty much put all of this app stuff on the back burner until I'm satisfied with the library where it's at. 

Things to do/test/play with/figure out when I have time:

  - AppConfig injection

  - MySQL/MariaDB connector (simple version without EF/Identify, since all we're doing is a single query on startup).
    Local hashing, parameterized connection string.  User with only select privileges.

  - Modals.  Try to create a simple PIN entry component.

  - Store DB connection details in appSettings.json or elsewhere?
   
