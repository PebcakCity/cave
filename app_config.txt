- Implement a configuration file/database reader system for the RPi apps.


Current state of testing:
------------------------

-------------------------------------------------------------------------------
JSON input file:
-------------------------------------------------------------------------------

{
    "RoomName": "Main 1",
    "Devices": {
        "Projector 1": {
            "Class": "NECProjector",
            "ConnectionInfo": {
                "$type": "network",
                "Address": "192.168.1.100",
                "Port": 7142
            },
            "Controls": {
                "ControlTypes": 45,
                "InputControls": {
                    "input1": {
                        "DisplayName": "Computer",
                        "Value" : "RGB1",
                        "ImageResource" : {
                            "Type": "EmbeddedResource",
                            "Path": "image-computer"
                        }
                    },
                    "input2": {
                        "DisplayName": "Apple TV",
                        "Value": "HDMI1",
                        "ImageResource": {
                            "Type": "ImageFile",
                            "Path": "images/apple.png"
                        }
                    },
                    "input3": {
                        "DisplayName": "Network",
                        "Value": "Network",
                        "ImageResource": {
                            "Type": "EmbeddedResource",
                            "Path" : "image-ethernet"
                        }
                    }
                }
            }
        },
        "Switcher": {
            "Class": "Relay2Channel",
            "Controls": {
                "ControlTypes": "InputSelectButtons",
                "InputControls": {
                    "input1": {
                        "DisplayName": "Desktop",
                        "Value": "Input1",
                        "ImageResource": {
                            "Type": "EmbeddedResource",
                            "Path": "image-computer"
                        }
                    },
                    "input2": {
                        "DisplayName": "Laptop",
                        "Value": "Input2",
                        "ImageResource": {
                            "Type": "EmbeddedResource",
                            "Path": "image-laptop"
                        }
                    }
                }
            }
        }
    },
    "Sources": {
        "default": {
            "DisplayName": "Desktop",
            "ImageResource": {
                "Type": "EmbeddedResource",
                "Path" : "image-computer"
            },
            "DeviceInputs": {
                "Projector 1": "input1",
                "Switcher": "input1"
            }
        },
        "source2": {
            "DisplayName": "Laptop",
            "ImageResource": {
                "Type": "EmbeddedResource",
                "Path": "image-laptop"
            },
            "DeviceInputs": {
                "Projector 1": "input1",
                "Switcher": "input2"
            }
        },
        "source3": {
            "DisplayName": "Apple TV",
            "ImageResource": {
                "Type": "ImageFile",
                "Path": "images/apple.png"
            },
            "DeviceInputs": {
                "Projector 1": "input2"
            }
        }
    }
}

-------------------------------------------------------------------------------
Test code:
-------------------------------------------------------------------------------

public class AppConfig
{
    public string? RoomName {get; set;}
    public Dictionary<string, DeviceDescription> Devices {get; set;}
    public Dictionary<string, Source> Sources {get; set;}

    public AppConfig()
    {
        Devices = new();
        Sources = new();
    }
}

public class DeviceDescription
{
    public string? Class {get; set;}
    public DeviceConnectionInfo? ConnectionInfo {get; set;}
    public Controls Controls {get; set;}

    public DeviceDescription()
    {
        Controls = new();
    }
}

[JsonDerivedType(typeof(DeviceConnectionInfo), typeDiscriminator: "base")]
[JsonDerivedType(typeof(NetworkDeviceConnectionInfo), typeDiscriminator: "network")]
[JsonDerivedType(typeof(SerialDeviceConnectionInfo), typeDiscriminator: "serial")]
public class DeviceConnectionInfo {}

public class NetworkDeviceConnectionInfo : DeviceConnectionInfo
{
    public string? Address {get; set;}
    public int Port {get; set;}
}

public class SerialDeviceConnectionInfo : DeviceConnectionInfo
{
    public string? SerialDevice {get; set;}
    public int Baudrate {get; set;}
}

[System.Flags]
public enum ControlTypes
{
    None = 0,
    InputSelectButtons = 1,
    PowerOnOffButtons = 2,
    DisplayMuteToggle = 4,
    AudioMuteToggle = 8,
    AudioVolumeButtons = 16,
    AudioVolumeSlider = 32
}

public class Controls
{
    public ControlTypes ControlTypes {get; set;}
    public Dictionary<string, InputControl> InputControls {get; set;}

    public Controls() { InputControls = new(); }
}

public class InputControl
{
    public string? DisplayName {get; set;}
    public string? Value {get; set;}
    public ImageResource? ImageResource {get; set;}

    public override string ToString()
    {
        return $"{DisplayName}: {Value} ({ImageResource})";
    }
}

public class ImageResource 
{
    public enum ResourceType 
    {
        EmbeddedResource,
        ImageFile
    }

    public ResourceType Type {get; set;}
    public string? Path {get; set;}

    public override string ToString()
    {
        return $"Type:{Type}, Path:{Path}";
    }
}

public class Source 
{
    public string? DisplayName {get; set;}
    public ImageResource? ImageResource {get; set;}
    public Dictionary<string, string> DeviceInputs {get; set;}

    public Source() { DeviceInputs = new(); }

    public override string ToString()
    {
        string retVal = $"{DisplayName}, ({ImageResource})\n";
        retVal += "DeviceInputs:\n";
        foreach( var device in DeviceInputs!.Keys )
        {
            var input = DeviceInputs[device];
            retVal += $"\t{device}: {input}\n";
        }
        retVal += "\n";
        return retVal;
    }
}


public class Program
{
    public static void Main(string[] args)
    {
        using FileStream jsonFile = new ("data.json", FileMode.Open);
        JsonNode rootNode = JsonNode.Parse(jsonFile)!;

        var options = new JsonSerializerOptions
        {
            WriteIndented = true,
            Converters =
            {
                new JsonStringEnumConverter()
            }
        };

        /* Deserialize entire AppConfig object */
        var appConfig = JsonSerializer.Deserialize<AppConfig>(rootNode, options);

        if (appConfig != null)
        {
            Console.WriteLine("Deserialization successful.");
            Console.WriteLine($"Room name: {appConfig.RoomName}");
            Console.WriteLine($"Projector controller class: {appConfig.Devices.GetValueOrDefault("Projector 1")?.Class}");

            // test with bad device key
            Console.WriteLine($"Non-existent device controller class: {appConfig.Devices.GetValueOrDefault("Non-existent device")?.Class}");

            var pjControlTypes = appConfig.Devices["Projector 1"].Controls.ControlTypes;
            Console.WriteLine($"\nProjector 1 control types: {pjControlTypes}\n");

            var pjInputControls = appConfig.Devices["Projector 1"].Controls.InputControls;
            Console.WriteLine($"Input buttons defined:");
            foreach( var key in pjInputControls.Keys )
                Console.WriteLine($"input name: {key}, details: {pjInputControls[key]}");
            
            Console.WriteLine($"Input 1 display name: {appConfig.Devices["Projector 1"].Controls.InputControls.GetValueOrDefault("input1")?.DisplayName}");

            var pjConnectionInfo = appConfig.Devices["Projector 1"].ConnectionInfo;
            if (pjConnectionInfo is NetworkDeviceConnectionInfo ndci)
                Console.WriteLine($"Projector network info: {ndci.Address}:{ndci.Port}");
            else if (pjConnectionInfo is SerialDeviceConnectionInfo sdci)
                Console.WriteLine($"Projector serial info: {sdci.SerialDevice}:{sdci.Baudrate}");

            // is null because it's not present
            var switcherConnectionInfo = appConfig.Devices["Switcher"].ConnectionInfo;
            Console.WriteLine($"switcherConnectionInfo == null ? : {switcherConnectionInfo == null}");
        }

        /* How do we avoid all the ? and ! everywhere?  Default constructors that set these objects to non-null for us? */

        Console.WriteLine("\n--------------------------------------------------------------------------------------\n");

        /* Deserializing only sections of the JSON at a time */

        JsonNode inputControlsNode = rootNode["Devices"]!["Projector 1"]!["Controls"]!["InputControls"]!;

        // Passing the options with JsonStringEnumConverter makes it deserialize properly with the enum type in ImageResource
        var inputControls = JsonSerializer.Deserialize<Dictionary<string, InputControl>>(inputControlsNode, options)!;
        foreach (var input in inputControls.Keys)
        {
            Console.WriteLine($"input name: {input}, value: {inputControls[input]}");
        }
        
        Console.WriteLine("\n--------------------------------------------------------------------------------------\n");

        JsonNode sourcesNode = rootNode["Sources"]!;
        var sources = JsonSerializer.Deserialize<Dictionary<string, Source>>(sourcesNode, options)!;
        foreach (var source in sources.Keys)
        {
            Console.WriteLine($"source name: {source}, value: ");
            Console.WriteLine(sources[source]);
        }

        /* Write the deserialized AppConfig back out to another file */
        using FileStream output = new("serialized.json", FileMode.Create);
        JsonSerializer.Serialize(output, appConfig, typeof(AppConfig), options);
    }
}



-------------------------------------------------------------------------------
Result:
-------------------------------------------------------------------------------

serialized.json:

{
  "RoomName": "Main 1",
  "Devices": {
    "Projector 1": {
      "Class": "NECProjector",
      "ConnectionInfo": {
        "$type": "network",
        "Address": "192.168.1.100",
        "Port": 7142
      },
      "Controls": {
        "ControlTypes": "InputSelectButtons, DisplayMuteToggle, AudioMuteToggle, AudioVolumeSlider",
        "InputControls": {
          "input1": {
            "DisplayName": "Computer",
            "Value": "RGB1",
            "ImageResource": {
              "Type": "EmbeddedResource",
              "Path": "image-computer"
            }
          },
          "input2": {
            "DisplayName": "Apple TV",
            "Value": "HDMI1",
            "ImageResource": {
              "Type": "ImageFile",
              "Path": "images/apple.png"
            }
          },
          "input3": {
            "DisplayName": "Network",
            "Value": "Network",
            "ImageResource": {
              "Type": "EmbeddedResource",
              "Path": "image-ethernet"
            }
          }
        }
      }
    },
    "Switcher": {
      "Class": "Relay2Channel",
      "ConnectionInfo": null,
      "Controls": {
        "ControlTypes": "InputSelectButtons",
        "InputControls": {
          "input1": {
            "DisplayName": "Desktop",
            "Value": "Input1",
            "ImageResource": {
              "Type": "EmbeddedResource",
              "Path": "image-computer"
            }
          },
          "input2": {
            "DisplayName": "Laptop",
            "Value": "Input2",
            "ImageResource": {
              "Type": "EmbeddedResource",
              "Path": "image-laptop"
            }
          }
        }
      }
    }
  },
  "Sources": {
    "default": {
      "DisplayName": "Desktop",
      "ImageResource": {
        "Type": "EmbeddedResource",
        "Path": "image-computer"
      },
      "DeviceInputs": {
        "Projector 1": "input1",
        "Switcher": "input1"
      }
    },
    "source2": {
      "DisplayName": "Laptop",
      "ImageResource": {
        "Type": "EmbeddedResource",
        "Path": "image-laptop"
      },
      "DeviceInputs": {
        "Projector 1": "input1",
        "Switcher": "input2"
      }
    },
    "source3": {
      "DisplayName": "Apple TV",
      "ImageResource": {
        "Type": "ImageFile",
        "Path": "images/apple.png"
      },
      "DeviceInputs": {
        "Projector 1": "input2"
      }
    }
  }
}

-------------------------------------------------------------------------------

Serializes & deserializes as expected.

    - GetValueOrDefault for non-existent keys works as intended
    - "$type": "network" results in NetworkDeviceConnectionInfo being created
        with Address & Port properties
    - "ControlTypes": 45, serializes & deserializes as "InputSelectButtons, 
        DisplayMuteToggle, AudioMuteToggle, AudioVolumeSlider"
    - "Switcher": "ConnectionInfo" serializes as null because it's not present
        in the original data

Would be ideal to verify "Sources" separately and after "Devices" to ensure
that for each listed source, the devices and inputs listed exist.  Otherwise,
we need to either not display that source button or back out with some sort of
exception.

Basic concept for app startup:

1. Try to load/parse JSON string from database.  If that failed, try loading the file from disk.
2. Try to instantiate all device controller components (using Task.WhenAll maybe?)
3. If successful, write the config back to a file on disk

For loading from database, we need a room reference.  We can get that either from the .json config itself (can we do
that without having to parse the whole file twice?), from a separate file we place on disk, from MAC address, from
device IP address (static/DHCP reservation required), maybe a unique ID of some sort?  Serial number of the processor?
cat /proc/cpuinfo?  cat /etc/machine-id?  Obviously not going to work if devices are not Raspberry Pis or not running
Linux...  Would prefer not to be limited to one specific machine type or OS.

Would like something fairly unique out of the box that can be changed if needed, maybe doesn't change when the OS is
reinstalled, and would be the same whatever OS the device happens to be running.  That's probably going to be a
MAC address...?  Also, could just be the room name stored in a file somewhere & we replace that file as needed when
spinning up a system.

*Windows (Powershell): (Get-NetAdapter -Name "Ethernet").MacAddress
**Linux (bash): cat /sys/class/net/$(ip route show default | awk '/default/ {print $5; exit}')/address

*   It's "Ethernet" on my desktop here, but it likely varies from machine to machine.
**  '...; exit}' causes awk to stop printing after the first line if there are multiple interfaces returned
    (eg. both wired and wireless)

using pin entry system instead of MAC

startup
    try
        get user name & DB address from DB file
        get pin code from user
        hash user/pin
        connect/query database for JSON room config
        start application
        write JSON to local file

    on failure to get user & DB
        log failure reason (file missing) & exit

    on failure to query database
        if authentication failure
            throw bad pin entry
        else (server's down?)
            read local file instead

    on bad pin entry
        log failure reason (bad pin) & do nothing

    on failure to read local file
        log failure reason & exit

    on failure to start application
        log failure reason & exit

----------------

start application
    for each device in app config
        try 
            create device controller component for device
            add component to UI
        on error
            log & throw
    for each source in app config
        for each device input listed
            // Don't have to check if device HAS an input called that (would be hard to do without including full name
            // of class & doing some magic with searching that namespace for an Input class & checking its members.)
            // Just check if it's listed in the config's devices section.
            if device or input not found in app config
                log & throw | ignore source


-------------------------------------------------------------------------------







Device GetDevice(string deviceName)
{
    Device device;
    if ( deviceName != null )
        device = Devices.GetValueOrDefault(deviceName);
    return device;
}

async Task SelectSource(string sourceName)
{
    try
    {
        var deviceInputList = Sources.GetValueOrDefault(sourceName);
        foreach ( var deviceInput in deviceInputList )
        {
            Device device = GetDevice(deviceInput.Key);
            if ( device is IDisplayInputSelectable idis )
                await idis.PowerOnSelectInput(deviceInput.Value);
            else if ( device is IInputSelectable iis )
                await iis.SelectInput(deviceInput.Value);
                
            if ( device is IDisplayMutable idm )
                idm.DisplayMute(false);
        }
    }
    catch ( Exception ex )
    {
        throw;
    }
}

SystemOnButton()
{
    for device in devices:
        switch( device_type )
            case projector:
                if has_default_input:
                    await PowerOnSelectInput(default_input)
                else
                    await PowerOn()
            case tv:
                if has_default_input:
                    await PowerOnSelectInput(default_input)
                else
                    await PowerOn()
            case switcher:
                // do whatever the hell we decide is the default behavior for these
}

SystemOffButton()
{
    for device in devices:
        switch( device_type )
            case projector:
                await PowerOff()
            case tv:
                await PowerOff()
            case switcher:
                // same ...
}

